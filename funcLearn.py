# python中为对象编写接口，而不是为数据类型
"""看python对命名的一般要求。
文件名:全小写,可使用下划线
函数名:小写，可以用下划线风格单词以增加可读性。如：myfunction，my_example_function。注意：混合大小写仅被允许用于这种风格已经占据优势的时候，以便保持向后兼容。有的人，喜欢用这样的命名风格：myFunction，除了第一个单词首字母外，后面的单词首字母大写。这也是可以的，因为在某些语言中就习惯如此。
函数的参数：如果一个函数的参数名称和保留的关键字(所谓保留关键字，就是python语言已经占用的名称，通常被用来做为已经有的函数等的命名了，你如果还用，就不行了。)冲突，通常使用一个后缀下划线好于使用缩写或奇怪的拼写。
变量:变量名全部小写，由下划线连接各个单词。如color = WHITE，this_is_a_variable = 1。"""
# 函数要有返回值，也必须有返回值。
# 程序在大多数情况下是给人看的，只是偶尔被机器执行以下。必须要写注释
""" 命名空间（英语：Namespace）表示标识符（identifier）的可见范围。
一个标识符可在多个命名空间中定义，它在不同命名空间中的含义是互不相干的。
这样，在一个新的命名空间中可定义任何标识符，它们不会与任何已有的标识符发生冲突，因为已有的定义都处于其它命名空间中。
例如，设Bill是X公司的员工，工号为123，而John是Y公司的员工，工号也是123。由于两人在不同的公司工作，可以使用相同的工号来标识而不会造成混乱，
这里每个公司就表示一个独立的命名空间。如果两人在同一家公司工作，其工号就不能相同了，否则在支付工资时便会发生混乱。
这一特点是使用命名空间的主要理由。在大型的计算机程序或文档中，往往会出现数百或数千个标识符。命名空间（或类似的方法，见“命名空间的模拟”一节）
提供一隱藏區域標識符的機制。通过将逻辑上相关的标识符组织成相应的命名空间，可使整个系统更加模块化。
在编程语言中，命名空间是对作用域的一种特殊的抽象，它包含了处于该作用域内的标识符，且本身也用一个标识符来表示，
这样便将一系列在逻辑上相关的标识符用一个标识符组织了起来。许多现代编程语言都支持命名空间。
在一些编程语言（例如C++和Python）中，命名空间本身的标识符也属于一个外层的命名空间，也即命名空间可以嵌套，构成一个命名空间树，树根则是无名的全局命名空间。
函数和类的作用域可被視作隱式命名空间，它們和可見性、可訪問性和对象生命周期不可分割的联系在一起。"""
"""
编写函数的注意事项:
1、编写函数，在开发实践中是非常必要和常见的，一般情况，你写的函数应该是：
2、尽量不要使用全局变量。
3、如果参数是可变类型数据，在函数内，不要修改它。
4、每个函数的功能和目标要单纯，不要试图一个函数做很多事情。
5、函数的代码行数尽量少。
6、函数的独立性越强越好，不要跟其它的外部东西产生关联。
"""
